pipeline {
  agent any
  environment {
      PGPASSWORD = 'canvas'
      RAILS_ENV = 'test'
  }
  stages {
    stage('BUILD') {
      steps {
        sh 'bundle install'
      }
    }
    stage('TESTS') {
      steps {
        sh 'for config in amazon_s3 database delayed_jobs domain file_store outgoing_mail security external_migration; do cp -v config/$config.yml.example config/$config.yml; done'
        sh 'bundle exec rails db:test:reset'
        // sh 'bundle exec rspec spec/models/*.rb'
        sh 'bundle exec rspec spec/models/users/*.rb'
      }
    }
    stage('AMI GENERATION') {
      steps {
        script {
          writeFile file: 'packer/terraform_vars.json', text: params.terraform_vars
        }
        script {
          input message: 'Continuar con la generaci√≥n de AMI mediante Packer?', ok: 'Continuar'
          writeFile file: 'packer/packer_vars.json', text: params.packer_vars
        }
        sh '''
          #!/bin/bash
          cd packer
          rm -f update-manifest.json
          ./canvas_update.sh
        '''
        archiveArtifacts allowEmptyArchive: true, artifacts: 'packer/update-manifest.json', onlyIfSuccessful: true
      }
    }
    stage('DEPLOY') {
      steps {
        script {
          input message: 'Continuar con el Deploy de AMI?', ok: 'Continuar'
          writeFile file: 'terraform/infraestructure_variables.tf', text: params.infraestructure_variables
        }
        sh '''
          #!/bin/bash
          cd terraform
          ./creation.sh
        '''
        archiveArtifacts allowEmptyArchive: true, artifacts: 'terraform/terraform.tfstate', onlyIfSuccessful: true
        archiveArtifacts allowEmptyArchive: true, artifacts: 'terraform/packer_variables.tf', onlyIfSuccessful: true
      }
    }
  }
}